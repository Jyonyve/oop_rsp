{"version":3,"sources":["aggregation/choice.tsx","store/PlayMap.tsx","component/judgement.js","view/Box.js","component/Play.tsx","component/User.tsx","component/Computer.tsx","App.js","reportWebVitals.js","index.js"],"names":["rcp","choice","props","rcp_choice","rcp_value","rock","scissors","paper","console","log","Error","PlayMap","Object","classCallCheck","this","isDataIn","myInstance","Map","createClass","key","value","size","judgement","master","slave","keys","Box","title","item","result","selection","toJS","values","react_default","a","createElement","className","concat","data-testid","src","Play","setUserSelect","setUserResult","gameCount","setGameCount","dataInMap","play","str","runInAction","useEffect","view_Box","onClick","User","_Component","_this","possibleConstructorReturn","getPrototypeOf","call","_title","_userSelect","_userResult","playMap","getPlayMap","makeObservable","assertThisInitialized","observable","userSelect","computed","userResult","action","bound","inherits","_choice","defineProperty","set","setDataInMap","comSelect","get","judge","Fragment","Play_Play","assign","bind","Component","Computer","_useState","useState","_useState2","slicedToArray","setComSelect","_useState3","_useState4","comResult","setComResult","comShowValue","useRef","current","comRcp","rcpArr","filter","isNaN","Number","randomIndex","Math","floor","random","length","randomChoice","insertCom","CResult","clear","App","component_User","component_Computer","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.07ae013f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport enum rcp {\n    rock,\n    scissors,\n    paper,\n}\n\nexport default interface Choice {\n    [key: string]: string;\n};\n\n\nexport const choice = (props:rcp) => {\n\n    let rcp_choice : rcp = props;\n    let rcp_value : Choice = {};\n\n    switch(rcp_choice){\n        case rcp.rock:\n            rcp_value['name'] = 'Rock';\n            rcp_value['img'] = \"https://media.istockphoto.com/photos/stone-pebble-gray-picture-id1288973456?b=1&k=20&m=1288973456&s=170667a&w=0&h=GBGgp4yrZv4ooDBws8yHF24sJ3rkEpObYsBWpVNKFT8=\";\n            break;\n        case rcp.scissors:\n            rcp_value['name'] = 'Scissors';\n            rcp_value['img'] = 'https://www.ikea.com/kr/en/images/products/sy-scissors__0112301_pe263788_s5.jpg?f=s';\n            break;\n        case rcp.paper :\n            rcp_value['name'] = 'Paper';\n            rcp_value['img'] =  'https://www.collinsdictionary.com/images/full/paper_111691001.jpg';\n            break;\n        default : \n            console.log(rcp_choice);\n            throw new Error('가위바위보 값이 없습니다!!');\n    }\n\n    return (\n        {rcp_choice, rcp_value}\n    );\n}","export default class PlayMap {\n\n    //User와 Computer는 동등한 레벨의 형제 객체라 서로 state를 사용하여 통신할 수 없다.\n    //그래서 둘 각자가 무엇을 냈는지 담을 맵 스토어를 만들어, 싱글톤을 이용해 공유.\n\n    static myInstance :  Map<string,{}>|null = null;\n    isDataIn : boolean = false;\n\n    private constructor(){\n        PlayMap.myInstance = new Map();\n    }\n    \n    static getPlayMap(){\n        if(PlayMap.myInstance === null){\n            PlayMap.myInstance = new Map();\n        }\n        return this.myInstance;\n    }\n\n    static getMapState(){ //맵에 데이터가 2개 이상일 때, true를 반환\n        if (this.myInstance && this.myInstance.size > 1){\n            return true;\n        } \n        return false;\n    }\n}","import { rcp } from \"../aggregation/choice\";\n\nconst judgement = (master, slave) => {\n  //승패의 결과 반환하는 조건문 =>\n  //master와 slave는 [key: [value1, value2]] 모양의 값이다. (예: rock : {name: 'Rock', img: 'img~~'})\n  //타입 비교 없이 단순 값비교를 위해 == 처리, compile warning 지우기 위해 eslint disable\n\n  // eslint-disable-next-line \n  if (Object.keys(master)[0] == Object.keys(slave)[0]) {\n    return \"tie\";\n  // eslint-disable-next-line\n  } else if (Object.keys(master)[0] == rcp.rock) {\n    // eslint-disable-next-line\n    return Object.keys(slave)[0] == rcp.scissors ? \"win\" : \"lose\";\n  // eslint-disable-next-line\n  } else if (Object.keys(master)[0] == rcp.scissors) {\n    // eslint-disable-next-line\n    return Object.keys(slave)[0] == rcp.paper ? \"win\" : \"lose\";\n  // eslint-disable-next-line\n  } else if (Object.keys(master)[0] == rcp.paper) {\n    // eslint-disable-next-line\n    return Object.keys(slave)[0] == rcp.rock ? \"win\" : \"lose\";\n  }\n};\nexport default judgement;\n","/* eslint-disable jsx-a11y/alt-text */\nimport { toJS } from \"mobx\";\nimport React from \"react\";\n\nfunction Box (props) {\n  const { title, item, result } = props;\n\n  let selection = toJS(item); //mobx 사용으로 클래스형과 함수형이 보내는 데이터 타입이 달라, toJS 통하여 형식 통일\n  let key = Object.keys(selection)[0] //앞의 switch문 식별자 enum(가위 바위 보) 추출\n  let values = selection[key] //value값 {name: \"~~\", img: \"~~\"}만 추출.\n  //Object.values(values) = JSON 데이터인 values의 밸류만 모은 배열 반환 -> {\"Rock\", \"http://~~\" }\n  // !!values = (value !== undefined && null) : !가 하나 붙으면 없으면, !!는 없지 않으면(==있으면)\n\n\n  return (\n    <div className={`box ${result}`}>\n      <h1>{title}</h1>\n      <h2 data-testid=\"item-name\"> {!!values ? Object.values(values)[0] : ''} </h2>\n      <img className=\"item-img\" src={!!values ? Object.values(values)[1]: ''} />\n      <h2>{result}</h2>\n    </div>\n  );\n};\n\nexport default Box;\n","import { rcp } from \"../aggregation/choice\";\nimport React, { useEffect, useRef, useState }  from \"react\";\nimport PlayMap from \"../store/PlayMap\";\nimport { action, runInAction } from \"mobx\";\nimport Box from \"../view/Box\";\n\nexport const Play =(props:any) =>{\n\n    let {title, item, result, setUserSelect, setUserResult, \n    gameCount,\n    setGameCount,\n    dataInMap,\n    } = props;\n    \n    const play = (str : rcp) => { //유저가 가위 바위 보 중 하나를 고르고, 이를 메모리에 저장한다. (컴퓨터는 게임 시작할 때 이미 골랐음.)\n    console.log(`4: user - click play, setUserSelect`)\n        runInAction( () => setUserSelect(str));\n    }\n\n    useEffect(() => {\n        if(dataInMap == true){ //dataInMap의 값이 변하면 동작하는 함수. 맵의 둘의 데이터가 다 들어와 있을 경우,\n            runInAction( () => setUserResult()); //맵에서 컴퓨터의 저장결과를 가져와서 유저와 비교하고, 승부를 리턴한다.\n        }\n    }, [dataInMap]);\n\n    useEffect(() => { //dataInMap의 값이 변하면 동작하는 함수. 맵의 데이터가 싹 비워졌을 때, 게임카운트를 1 올리고 새로운 게임을 시작할 준비를 한다. \n        if(dataInMap == false){  \n        setGameCount(gameCount+1);\n    console.log(` 0. set gameCount | 10: play - gameCount +1`)\n        console.log(`game Count : ${gameCount}`) //렌더링 시간차 때문에 바로 위에서 +1이 되었어도 콘솔에는 아직 더해지기 전의 값이 찍힘. (play를 눌러야 1이 올라감)\n        }\n    },[dataInMap]) \n\n    return(\n        <div className=\"main\">\n             <div>\n                <Box title={title} item={item} result={result}/>\n            </div>\n            <div>\n                <button onClick={() => {play(rcp.scissors)}}>가위</button>\n                <button onClick={() => {play(rcp.rock)}}>바위</button>\n                <button onClick={() => {play(rcp.paper)}}>보</button> \n            </div>\n            \n        </div>\n    );\n}","import { makeObservable, action, computed, observable, runInAction } from \"mobx\";\nimport React, { Component } from \"react\";\nimport Choice, { choice, rcp } from \"../aggregation/choice\";\nimport PlayMap from \"../store/PlayMap\";\nimport Box from \"../view/Box\";\nimport judgement from \"./judgement\";\nimport { Play } from \"./Play\";\n\nclass User extends Component<any>{\n\n    constructor(props:any){\n        super(props);\n        makeObservable(this ,{ //변수 위에 데코레이터를 써도 되지만, 이번엔 생성자에서 변수들에게 속성을 줘봄(mobx 문법)\n            _userSelect: observable, //observable: 이 데이터가 변하는 것을 관찰하겠다 -> state화\n            _userResult: observable,\n            userSelect: computed,\n            userResult :computed,\n            setUserSelect : action.bound, //observable의 스테이트가 변하는 동작을 하는 함수에 붙임.\n            setUserResult :action.bound\n        });\n    }\n\n    _title : string = 'User';\n    \n    _userSelect : {[key : string] : Choice} = {};\n\n    _userResult : string = \"\";\n\n    playMap = PlayMap.getPlayMap();\n\n    get title() {\n        return this._title;\n    }\n\n    get userSelect(){\n        return this._userSelect;\n    }\n\n    get userResult(){\n        return this._userResult;\n    }\n\n    setUserSelect (str :rcp) { //유저가 고른 가위바위보 값과 정보(이미지)등을 select에 담고, map에도 저장.\n        let {rcp_choice, rcp_value} = choice(str)\n        this._userSelect =  \n        { \n            [rcp_choice]: rcp_value\n        };\n\n    console.log(`5: user - userSelect to Map`)\n        this.playMap!.set('userSelect', this.userSelect);\n    console.log(`6: Data - DataInMap to true(ready to get result)`)\n        this.props.setDataInMap(true); //컴퓨터가 항상 미리 본인 값을 골라두므로, 유저가 값을 고르면 맵에 두 데이터가 다 들어온다. dataInMap을 true로 변경\n    }\n\n    setUserResult() { //맵에 컴퓨터와 유저 둘의 데이터가 다 들어와 있을 때, 유저의 승부를 userResult에 담는다.\n        console.log(`7: Data - setUserResult`);\n        if (this.props.dataInMap == true ) {\n            const userSelect = this.userSelect;\n            const comSelect = this.playMap!.get('comSelect');\n\n            console.log(`DataInMap == true, this judgement is for user`);\n            const judge : string = judgement(userSelect, comSelect)!;\n            this._userResult = judge;\n            console.log(`user result = ${this._userResult}`);\n        };\n    };\n\n    render(){\n        return(\n            <>\n            <Play \n            {...this.props}\n            title={this._title}\n            item={this.userSelect}\n            result={this._userResult}\n            setUserSelect = {this.setUserSelect.bind(this)}\n            setUserResult = {this.setUserResult.bind(this)}\n            /> \n            </>\n        );\n    }\n\n};\nexport default User;","import Box from \"../view/Box\";\nimport judgement from \"./judgement\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport PlayMap from \"../store/PlayMap\";\nimport { choice, rcp } from \"../aggregation/choice\";\n\n\nfunction Computer (props:any){\n    const playMap = PlayMap.getPlayMap()!;\n\n    const {gameCount, dataInMap} = props;\n\n    const title : string = 'Computer';\n    const [comSelect, setComSelect] = useState({});\n    const [comResult, setComResult] = useState(\"\");\n    const comShowValue = useRef({});\n\n    useEffect(()=> {\n        comShowValue.current = comSelect;\n    }, [comSelect])\n    \n\n    const randomChoice = () => { //컴퓨터가 랜덤하게 가위 바위 보를 고르는 방법\n        const rcpArr : string[] = Object.keys(rcp).filter( value => isNaN(Number(value)));\n        let randomIndex : number = Math.floor(Math.random() * rcpArr.length);\n        let comRcp = choice(randomIndex);\n        return  comRcp;\n    };\n\n    useEffect(() => { //한 판이 끝나면(게임 카운트가 변경되면) 컴퓨터가 새로운 가위바위보를 마음에 품고, 그 선택을 맵에 저장한다.\n    if(gameCount > 0) {\n    console.log(`1: com - random choice`)\n        let comRcp = randomChoice();\n        let insertCom : {} = {[comRcp.rcp_choice] : comRcp.rcp_value};\n    console.log(`2: com -  comSelect to Map`)             \n        playMap!.set('comSelect', insertCom);\n    console.log(`3: com -  setComSelect`)\n        setComSelect(insertCom);\n    }\n    }, [gameCount] );\n\n\n    useEffect( () => { //양쪽이 뭘 냈는지 저장하는 맵에 데이터 2개가 다 들어오면, 컴퓨터의 승부를 판단하여 state에 올리고 맵을 비운다.\n        if(dataInMap == true){\n            console.log(`DataInMap == true, this judgement is for computer`)\n            const CResult : string = judgement(playMap.get('comSelect'), playMap.get('userSelect'))!;\n            console.log(`computer result : ${CResult}`);\n    console.log(`8: com - setComResult`)\n            setComResult(CResult);\n            playMap.clear;\n    console.log(`9: Data - set DataInMap to false`)\n            props.setDataInMap(false);\n        }    \n    }, [dataInMap]);\n\n\n    return(\n        <>\n        <div>\n            <Box title={title} item={comShowValue.current} result={comResult} />\n        </div>\n        </>\n    );\n};\nexport default Computer;\n","import React , { useState} from \"react\";\nimport \"./App.css\";\nimport User from \"./component/User\";\nimport Computer from \"./component/Computer\";\n\n// 1. 박스 2개 (타이틀,사진, 결과)\n//2. 가위 바위 보 버튼이 있다\n//3. 버튼을 클릭하면 클릭한 값이 박스에 보임\n//4.컴퓨터는 랜덤하게 아이템 선택이 된다\n//5. 3 4 의 결과를 가지고 누가 이겼는지 승패를 따진다\n//6. 승패결과에따라 테두리 색이 바뀐다 (이기면-초록, 지면-빨강 비기면-검은색)\n\n\nexport const App = () => {\n  \n  //모든 컴포넌트가 공유할 정보로, 게임이 몇 판 일어났는지(play를 몇 번 눌렀는지)와\n  //두 명 다 결과를 제출했는지(가위 바위 보를 냈는지)를 알려주는 state를 props에 담아 보냄.\n  \n  const [gameCount, setGameCount] = useState(0); \n  const [dataInMap, setDataInMap] = useState(false);\n\n  return (\n    <div>\n      <div className=\"main\">\n        <User gameCount = {gameCount}\n        setGameCount = {setGameCount}\n        dataInMap = {dataInMap}\n        setDataInMap = {setDataInMap}\n        />\n        <Computer gameCount = {gameCount}\n        setGameCount = {setGameCount}\n        dataInMap = {dataInMap}\n        setDataInMap = {setDataInMap}\n        />\n      </div>\n    </div>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}